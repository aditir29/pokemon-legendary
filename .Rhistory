setwd("~/GitHub/pokemon-legendary")
knitr::opts_chunk$set(echo = TRUE)
# Importing Libraries
# Manipulation and modeling packages
library(data.table)
library(dplyr)
library(tidyverse)
library(caret)
library(reshape2)
library(ROCR)
# Visualization packages
library(ggplot2)
library(plotly)
library(DT)
library(plotly)
library(gridExtra)
library(ggcorrplot)
# Importing dataset
pokedex <- read.csv("pokemon_data_science.csv")
# attributes
stat_name <- names(pokedex)[5:11]
knitr::opts_chunk$set(echo = TRUE)
# Importing Libraries
# Manipulation and modeling packages
library(data.table)
library(dplyr)
library(tidyverse)
library(caret)
library(reshape2)
library(ROCR)
# Visualization packages
library(ggplot2)
library(plotly)
library(DT)
library(plotly)
library(gridExtra)
library(ggcorrplot)
# Importing dataset
pokedex <- read.csv("pokemon_data_science.csv")
# attributes
stat_name <- names(pokedex)[5:11]
# colors for
theme_colors <- c("#FF8EC8", "#FFDF51", "#46DBDF", "#FF8F46", "#42BAB7", "#DB0000")
datatable(pokedex[order(-pokedex$Total),c("Name", stat_name, "Catch_Rate")])
datatable(pokedex[order(-pokedex$Catch_Rate, -pokedex$Total),c("Name", stat_name, "Catch_Rate")])
# Using Lapply function to calculate Z-score for stats variables (including catch rate)
z_stats = as.data.frame(lapply(pokedex[,c(6:11, 22)], function(x) (x-mean(x))/sd(x)))
# Summing all values into a new "total" column naming it Strength
z_stats$Strength <- rowSums(z_stats)
z_stats <- cbind(pokedex[,c(1:2,13)],z_stats)
head(arrange(z_stats,desc(Strength)), n = 3)
datatable(z_stats[order(-z_stats$Strength),])
temp <- pokedex %>%
gather(key = Number, value = value, Total:Speed) %>%
mutate(key = as.factor(Number))
levels(temp$key) <- sort(stat_name)
temp$key <- factor(temp$key, levels = stat_name)
p1 <- temp %>%
filter(key == 'Total') %>%
ggplot(aes(value)) +
geom_histogram(color = theme_colors[2], fill = theme_colors[4]) +
labs(x = NULL, y = NULL,
title = "Summary of Distribution",
subtitle = "Total stat distribution is the only bimodal distribution.") +
facet_wrap(~ key)
p2 <- temp %>%
filter(key != 'Total') %>%
ggplot(aes(value)) +
geom_histogram(color = theme_colors[2], fill = theme_colors[4]) +
labs(x = NULL, y = NULL) +
facet_wrap(~ key)
grid.arrange(p1, p2, layout_matrix = matrix(c(1, 1, 2, 2, 2)))
pie <- pokedex %>%
group_by(isLegendary) %>%
summarise(Pokemon = n_distinct(Number))
labels <- c("Not Legendary", "Legendary")
plot_ly(pie, labels = labels,
values = ~ Pokemon,
type = 'pie',
textinfo='percent',
title ='Population for Legendary vs Non-Legendary Pokemon',
showlegend = T)
p3 <- temp %>%
filter(key == 'Total') %>%
ggplot(aes(value, fill = isLegendary, color = isLegendary)) +
geom_density(alpha = 0.75) +
scale_fill_manual(values = theme_colors[1:2]) +
scale_color_manual(values = theme_colors[1:2]) +
labs(x = NULL, y = NULL,
title = 'Non-Legendary Pokemons Have Lower Stats \nThan Legendary Pokemons',
subtitle = 'There are few non-legendary pokemons who hae higher stats than legendary pokemon') +
facet_wrap(~ key)
p4 <- temp %>%
filter(key != 'Total') %>%
ggplot(aes(value, fill = isLegendary, color = isLegendary)) +
geom_density(alpha = 0.75) +
scale_fill_manual(values = theme_colors[1:2]) +
scale_color_manual(values = theme_colors[1:2]) +
guides(color = F, fill = F) +
labs(x = NULL, y = NULL) +
facet_wrap(~ key)
grid.arrange(p3, p4, layout_matrix = matrix(c(1, 1, 2, 2, 2)))
pokedex %>%
ggplot(aes(Attack, Defense,  color = isLegendary, fill = isLegendary)) +
geom_point(colors= theme_colors[5:6], size = 5) +
coord_flip() +
labs(x = 'Special Attack', y = 'Special Defense',
title = 'Relationship between Special Defense and Special Attack Stats',
subtitle = 'Legendary Pokemon have higher Special Defense stats than regular Defense stats')
pokedex %>%
ggplot(aes(Sp_Atk, Sp_Def ,  color = isLegendary, fill = isLegendary)) +
geom_point(colors= theme_colors[5:6], size = 5) +
coord_flip() +
labs(x = 'Attack', y = 'Defense',
title = 'Relationship between Defense and Attack Stats',
subtitle = 'Legendary Pokemon have higher Defense and Attack stats')
pokedex %>%
ggplot(aes(Height_m, Weight_kg, color = isLegendary, fill = isLegendary)) +
geom_point(colors= theme_colors[5:6], size = 5) +
coord_flip() +
labs(x = 'Height', y = 'Weight',
title = 'Relationship between Height and Weight Stats',
subtitle = 'Legendary Pokemon are heavier and taller')
corr <- round(cor(pokedex[,c(stat_name)]), 1)
ggcorrplot(corr, method = 'circle')
# Select the required columns. Convert required columns to correct data type
pokedex <- subset(pokedex, select = -Catch_Rate)
pokedex$isLegendary <- as.factor(recode(pokedex$isLegendary, True = 1, False = 0))
pokedex$Generation <- as.factor(pokedex$Generation)
levels(pokedex$Type_2)[match("",levels(pokedex$Type_2))] <- "None"
levels(pokedex$Egg_Group_2)[match("",levels(pokedex$Egg_Group_2))] <- "None"
str(pokedex)
set.seed(355)
split <- createDataPartition(pokedex$isLegendary, p = 0.7, list = FALSE)
pokedex_train <- pokedex[split,]
pokedex_test <- pokedex[-split,]
colSums(is.na(pokedex))
set.seed(355)
preproc <- preProcess(pokedex_train, method=c("knnImpute"))
preproc
set.seed(355)
newpokedex_train <- predict(preproc, newdata=pokedex_train)
# Check for any NA values in the data frame
anyNA(newpokedex_train)
head(newpokedex_train)
x <- c("Number","Name","isLegendary")
saved_columns_train <- pokedex_train[,(names(pokedex_train) %in% x)]
newpokedex_train <- newpokedex_train[,!(names(pokedex_train) %in% x)]
dummy <- dummyVars(~., data = newpokedex_train)
newpokedex_train <- data.frame(predict(dummy, newdata = newpokedex_train))
rangeModel <- preProcess(newpokedex_train, method = "range")
newpokedex_train <- predict(rangeModel, newdata = newpokedex_train)
pokedex_train <- cbind(saved_columns_train,newpokedex_train)
newpokedex_test <- predict(preproc, newdata=pokedex_test)
saved_columns_test <- pokedex_test[,(names(pokedex_test) %in% x)]
newpokedex_test <- newpokedex_test[,!(names(pokedex_test) %in% x)]
newpokedex_test <- data.frame(predict(dummy, newdata = newpokedex_test))
newpokedex_test <- predict(rangeModel, newdata = newpokedex_test)
newpokedex_test <- predict(preproc, newdata=pokedex_test)
saved_columns_test <- pokedex_test[,(names(pokedex_test) %in% x)]
newpokedex_test <- newpokedex_test[,!(names(pokedex_test) %in% x)]
newpokedex_test <- data.frame(predict(dummy, newdata = newpokedex_test))
colnames(newpokedex_test)
newpokedex_test <- predict(rangeModel, newdata = newpokedex_test)
View(rangeModel)
rangeModel <- preProcess(newpokedex_train, method = c("range"))
newpokedex_train <- predict(rangeModel, newdata = newpokedex_train)
pokedex_train <- cbind(saved_columns_train,newpokedex_train)
newpokedex_test <- predict(preproc, newdata=pokedex_test)
saved_columns_test <- pokedex_test[,(names(pokedex_test) %in% x)]
newpokedex_test <- newpokedex_test[,!(names(pokedex_test) %in% x)]
newpokedex_test <- data.frame(predict(dummy, newdata = newpokedex_test))
newpokedex_test <- predict(rangeModel, newdata = newpokedex_test)
newpokedex_test <- predict(preproc, newdata=pokedex_test)
saved_columns_test <- pokedex_test[,(names(pokedex_test) %in% x)]
newpokedex_test <- newpokedex_test[,!(names(pokedex_test) %in% x)]
newpokedex_test <- data.frame(predict(dummy, newdata = newpokedex_test))
#newpokedex_test <- predict(rangeModel, newdata = newpokedex_test)
pokedex_test <- cbind(saved_columns_test,newpokedex_test)
View(pokedex_test)
start_time = Sys.time()
set.seed(355)
model_rf <- train(isLegendary ~.,
data = na.omit(pokedex_train_oversampled),
method = "rf",
importance = TRUE,
verbose = TRUE)
set.seed(2131)
pokedex_train_oversampled <- upSample(x = pokedex_train[,-3],y= pokedex_train$isLegendary, yname = "isLegendary")
pokedex_train_oversampled <- as.data.frame(pokedex_train_oversampled)
pokedex_train_oversampled <- pokedex_train_oversampled[, c(1:2,113,3:112)]
start_time = Sys.time()
set.seed(355)
model_rf <- train(isLegendary ~.,
data = na.omit(pokedex_train_oversampled),
method = "rf",
importance = TRUE,
verbose = TRUE)
install.packages("randomForest", dependencies = TRUE)
install.packages("randomForest", dependencies = TRUE)
library(randomForest)
knitr::opts_chunk$set(echo = TRUE)
# Importing Libraries
# Manipulation and modeling packages
library(data.table)
library(dplyr)
library(tidyverse)
library(caret)
library(reshape2)
library(ROCR)
# Visualization packages
library(ggplot2)
library(plotly)
library(DT)
library(plotly)
library(gridExtra)
library(ggcorrplot)
library(randomForest)
# Importing dataset
pokedex <- read.csv("pokemon_data_science.csv")
# attributes
stat_name <- names(pokedex)[5:11]
start_time = Sys.time()
set.seed(355)
model_rf <- train(isLegendary ~.,
data = na.omit(pokedex_train_oversampled),
method = "rf",
importance = TRUE,
verbose = TRUE)
start_time = Sys.time()
set.seed(355)
model_rf <- train(isLegendary ~.,
data = na.omit(pokedex_train_oversampled),
method = "rf",
importance = TRUE,
verbose = TRUE)
install.packages("e1071")
start_time = Sys.time()
set.seed(355)
model_rf <- train(isLegendary ~.,
data = na.omit(pokedex_train_oversampled),
method = "rf",
importance = TRUE,
verbose = TRUE)
